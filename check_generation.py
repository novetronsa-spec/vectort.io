#!/usr/bin/env python3
"""
Check what's actually being generated by the system
"""

import requests
import json
import time

BASE_URL = "https://emergent-clone-151.preview.emergentagent.com/api"
TEST_USER = {
    "email": f"check.gen.{int(time.time())}@vectort.io",
    "password": "CheckGen123!",
    "full_name": f"Check Gen {int(time.time() % 1000000)}"
}

def make_request(method, endpoint, data=None, headers=None, access_token=None):
    url = f"{BASE_URL}{endpoint}"
    default_headers = {"Content-Type": "application/json"}
    
    if headers:
        default_headers.update(headers)
    
    if access_token:
        default_headers["Authorization"] = f"Bearer {access_token}"
    
    if method.upper() == "GET":
        response = requests.get(url, headers=default_headers, timeout=30)
    elif method.upper() == "POST":
        response = requests.post(url, json=data, headers=default_headers, timeout=30)
    
    return response

def main():
    print("üîç CHECKING GENERATION OUTPUT")
    print("=" * 50)
    
    # Register user
    response = make_request("POST", "/auth/register", TEST_USER)
    if response.status_code != 200:
        print(f"‚ùå Registration failed: {response.status_code}")
        return
    
    access_token = response.json()["access_token"]
    print(f"‚úÖ Authenticated")
    
    # Create project
    project_data = {
        "title": "Check Generation Output",
        "description": "Simple e-commerce app to check generation",
        "type": "ecommerce"
    }
    
    project_response = make_request("POST", "/projects", project_data, access_token=access_token)
    if project_response.status_code != 200:
        print(f"‚ùå Project creation failed: {project_response.status_code}")
        return
    
    project_id = project_response.json()["id"]
    print(f"‚úÖ Project created: {project_id}")
    
    # Generate code (basic mode first)
    generation_request = {
        "description": "Boutique en ligne avec panier d'achats, catalogue de produits et syst√®me de paiement",
        "type": "ecommerce",
        "framework": "react",
        "advanced_mode": False
    }
    
    print("\nüöÄ Generating code...")
    start_time = time.time()
    gen_response = make_request("POST", f"/projects/{project_id}/generate", generation_request, access_token=access_token)
    generation_time = time.time() - start_time
    
    if gen_response.status_code != 200:
        print(f"‚ùå Generation failed: {gen_response.status_code}")
        print(f"Response: {gen_response.text}")
        return
    
    data = gen_response.json()
    print(f"‚úÖ Generation completed in {generation_time:.1f}s")
    
    # Analyze what was generated
    print("\nüìä GENERATION ANALYSIS")
    print("-" * 30)
    
    fields = {
        "html_code": data.get("html_code", ""),
        "css_code": data.get("css_code", ""),
        "js_code": data.get("js_code", ""),
        "react_code": data.get("react_code", ""),
        "backend_code": data.get("backend_code", ""),
        "project_structure": data.get("project_structure"),
        "package_json": data.get("package_json", ""),
        "dockerfile": data.get("dockerfile", ""),
        "readme": data.get("readme", ""),
        "all_files": data.get("all_files")
    }
    
    for field, content in fields.items():
        if content:
            if isinstance(content, str):
                print(f"‚úÖ {field}: {len(content)} characters")
                # Show first 200 chars
                preview = content[:200].replace('\n', ' ')
                print(f"   Preview: {preview}...")
            else:
                print(f"‚úÖ {field}: {type(content)} - {content}")
        else:
            print(f"‚ùå {field}: Empty")
    
    # Test advanced mode
    print(f"\nüöÄ Testing Advanced Mode...")
    advanced_request = {
        "description": "Boutique en ligne compl√®te avec React, MongoDB, Stripe, gestion des stocks",
        "type": "ecommerce",
        "framework": "react",
        "database": "mongodb",
        "advanced_mode": True,
        "features": ["authentication", "payment_processing", "shopping_cart"],
        "integrations": ["stripe", "mongodb"]
    }
    
    # Create new project for advanced test
    adv_project_data = {
        "title": "Advanced Generation Test",
        "description": "Advanced e-commerce test",
        "type": "ecommerce"
    }
    
    adv_project_response = make_request("POST", "/projects", adv_project_data, access_token=access_token)
    if adv_project_response.status_code == 200:
        adv_project_id = adv_project_response.json()["id"]
        
        start_time = time.time()
        adv_gen_response = make_request("POST", f"/projects/{adv_project_id}/generate", advanced_request, access_token=access_token)
        adv_generation_time = time.time() - start_time
        
        if adv_gen_response.status_code == 200:
            adv_data = adv_gen_response.json()
            print(f"‚úÖ Advanced generation completed in {adv_generation_time:.1f}s")
            
            print("\nüìä ADVANCED GENERATION ANALYSIS")
            print("-" * 35)
            
            for field, content in fields.items():
                adv_content = adv_data.get(field)
                if adv_content:
                    if isinstance(adv_content, str):
                        print(f"‚úÖ {field}: {len(adv_content)} characters")
                    else:
                        print(f"‚úÖ {field}: {type(adv_content)}")
                else:
                    print(f"‚ùå {field}: Empty")
        else:
            print(f"‚ùå Advanced generation failed: {adv_gen_response.status_code}")
            print(f"Response: {adv_gen_response.text}")
    
    print(f"\nüéØ SUMMARY")
    print("-" * 20)
    print(f"Basic mode: Generated {sum(1 for field, content in fields.items() if data.get(field))} fields")
    if 'adv_data' in locals():
        print(f"Advanced mode: Generated {sum(1 for field, content in fields.items() if adv_data.get(field))} fields")

if __name__ == "__main__":
    main()