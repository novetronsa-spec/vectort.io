#!/usr/bin/env python3
"""
üéØ TEST FINAL 100% FONCTIONNALIT√â - VECTORT.IO
Test exhaustif avec corrections du mapping de fichiers selon la demande sp√©cifique
"""

import requests
import json
import sys
import time
from typing import Dict, Any, Optional

# Configuration
BASE_URL = "https://oauth-debug-2.preview.emergentagent.com/api"
TEST_USER = {
    "email": f"vectort.final.test.{int(time.time())}@vectort.io",
    "password": "VectortFinal123!",
    "full_name": f"Vectort Final Test {int(time.time() % 1000000)}"
}

class VectortFinalTester:
    def __init__(self):
        self.base_url = BASE_URL
        self.access_token = None
        self.user_id = None
        self.test_project_id = None
        self.results = {
            "passed": 0,
            "failed": 0,
            "errors": []
        }

    def log_result(self, test_name: str, success: bool, message: str = ""):
        """Log test result"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if message:
            print(f"   {message}")
        
        if success:
            self.results["passed"] += 1
        else:
            self.results["failed"] += 1
            self.results["errors"].append(f"{test_name}: {message}")

    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, 
                    headers: Optional[Dict] = None, timeout: int = 45) -> requests.Response:
        """Make HTTP request with error handling"""
        url = f"{self.base_url}{endpoint}"
        default_headers = {"Content-Type": "application/json"}
        
        if headers:
            default_headers.update(headers)
        
        if self.access_token and "Authorization" not in default_headers:
            default_headers["Authorization"] = f"Bearer {self.access_token}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=default_headers, timeout=timeout)
            elif method.upper() == "POST":
                response = requests.post(url, json=data, headers=default_headers, timeout=timeout)
            elif method.upper() == "PUT":
                response = requests.put(url, json=data, headers=default_headers, timeout=timeout)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=default_headers, timeout=timeout)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            return response
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")
            raise

    def setup_authentication(self):
        """Setup authentication for testing"""
        print("\nüîê SETUP: Authentication pour tests finaux")
        print("-" * 50)
        
        try:
            # Try registration first
            response = self.make_request("POST", "/auth/register", TEST_USER)
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data["access_token"]
                self.user_id = data["user"]["id"]
                self.log_result("Authentication Setup", True, f"User registered: {self.user_id}")
            elif response.status_code == 400:
                # User exists, try login
                login_response = self.make_request("POST", "/auth/login", {
                    "email": TEST_USER["email"],
                    "password": TEST_USER["password"]
                })
                if login_response.status_code == 200:
                    data = login_response.json()
                    self.access_token = data["access_token"]
                    self.user_id = data["user"]["id"]
                    self.log_result("Authentication Setup", True, f"User logged in: {self.user_id}")
                else:
                    self.log_result("Authentication Setup", False, f"Login failed: {login_response.status_code}")
            else:
                self.log_result("Authentication Setup", False, f"Registration failed: {response.status_code}")
        except Exception as e:
            self.log_result("Authentication Setup", False, f"Exception: {str(e)}")

    def test_ecommerce_advanced_generation(self):
        """1. Test g√©n√©ration E-commerce mode avanc√©"""
        print("\n=== 1. TEST G√âN√âRATION E-COMMERCE MODE AVANC√â ===")
        
        if not self.access_token:
            self.log_result("E-commerce Advanced Generation", False, "No access token available")
            return None
        
        try:
            # Cr√©er utilisateur et projet E-commerce
            project_data = {
                "title": "E-commerce Avanc√© Vectort Test",
                "description": "Boutique en ligne compl√®te avec React, MongoDB, syst√®me de paiement, gestion des stocks, interface d'administration",
                "type": "ecommerce"
            }
            
            project_response = self.make_request("POST", "/projects", project_data)
            if project_response.status_code != 200:
                self.log_result("E-commerce Project Creation", False, 
                              f"Failed to create project: {project_response.status_code}")
                return None
            
            project_id = project_response.json()["id"]
            self.test_project_id = project_id
            self.log_result("E-commerce Project Creation", True, f"Project created: {project_id}")
            
            # Lancer g√©n√©ration mode avanc√©
            start_time = time.time()
            generation_request = {
                "description": "Cr√©er une boutique en ligne moderne et compl√®te avec catalogue de produits interactif, panier d'achats persistant, syst√®me de paiement s√©curis√© Stripe, gestion des commandes en temps r√©el, interface d'administration compl√®te, authentification utilisateur robuste, syst√®me de reviews et ratings, gestion avanc√©e des stocks avec alertes automatiques, dashboard analytics d√©taill√©, notifications push en temps r√©el, design responsive ultra-moderne, optimisation SEO, et int√©gration avec services tiers",
                "type": "ecommerce",
                "framework": "react",
                "database": "mongodb",
                "advanced_mode": True,  # MODE AVANC√â ACTIV√â
                "features": [
                    "authentication", 
                    "payment_processing", 
                    "shopping_cart", 
                    "admin_panel",
                    "real_time_notifications",
                    "analytics_dashboard",
                    "inventory_management",
                    "seo_optimization"
                ],
                "integrations": ["stripe", "mongodb", "redis", "elasticsearch"],
                "deployment_target": "vercel"
            }
            
            response = self.make_request("POST", f"/projects/{project_id}/generate", generation_request, timeout=60)
            generation_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                
                # V√©rifier MAPPING INTELLIGENT des fichiers g√©n√©r√©s
                html_code = data.get("html_code", "")
                css_code = data.get("css_code", "")
                js_code = data.get("js_code", "")
                react_code = data.get("react_code", "")
                backend_code = data.get("backend_code", "")
                
                # Confirmer que html_code, css_code, js_code, react_code, backend_code sont TOUS remplis
                all_filled = all([html_code, css_code, js_code, react_code, backend_code])
                
                if all_filled:
                    self.log_result("E-commerce Advanced Generation - ALL FILES FILLED", True, 
                                  f"‚úÖ TOUS les champs remplis: HTML({len(html_code)} chars), CSS({len(css_code)} chars), JS({len(js_code)} chars), React({len(react_code)} chars), Backend({len(backend_code)} chars)")
                else:
                    filled_fields = []
                    if html_code: filled_fields.append(f"HTML({len(html_code)} chars)")
                    if css_code: filled_fields.append(f"CSS({len(css_code)} chars)")
                    if js_code: filled_fields.append(f"JS({len(js_code)} chars)")
                    if react_code: filled_fields.append(f"React({len(react_code)} chars)")
                    if backend_code: filled_fields.append(f"Backend({len(backend_code)} chars)")
                    
                    self.log_result("E-commerce Advanced Generation - PARTIAL FILES", False, 
                                  f"‚ùå Seulement certains champs remplis: {', '.join(filled_fields)}")
                
                # V√©rifier performance < 20s par g√©n√©ration
                if generation_time < 20:
                    self.log_result("E-commerce Generation Performance", True, 
                                  f"‚úÖ G√©n√©ration rapide: {generation_time:.1f}s < 20s")
                else:
                    self.log_result("E-commerce Generation Performance", False, 
                                  f"‚ùå G√©n√©ration lente: {generation_time:.1f}s > 20s")
                
                return data
            else:
                self.log_result("E-commerce Advanced Generation", False, 
                              f"Generation failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            self.log_result("E-commerce Advanced Generation", False, f"Exception: {str(e)}")
            return None

    def test_file_mapping_specific(self, generated_data):
        """2. Test mapping de fichiers sp√©cifique"""
        print("\n=== 2. TEST MAPPING DE FICHIERS SP√âCIFIQUE ===")
        
        if not generated_data:
            self.log_result("File Mapping Test", False, "No generated data available")
            return
        
        try:
            # V√©rifier que les extensions .jsx ‚Üí react_code
            react_code = generated_data.get("react_code", "")
            if react_code and (".jsx" in react_code or "React" in react_code or "jsx" in react_code.lower()):
                self.log_result("File Mapping - JSX to React", True, 
                              "‚úÖ Extensions .jsx correctement mapp√©es vers react_code")
            else:
                self.log_result("File Mapping - JSX to React", False, 
                              "‚ùå Mapping .jsx ‚Üí react_code non d√©tect√©")
            
            # V√©rifier que les .css ‚Üí css_code
            css_code = generated_data.get("css_code", "")
            if css_code and ("css" in css_code.lower() or "style" in css_code.lower() or "{" in css_code):
                self.log_result("File Mapping - CSS", True, 
                              "‚úÖ Extensions .css correctement mapp√©es vers css_code")
            else:
                self.log_result("File Mapping - CSS", False, 
                              "‚ùå Mapping .css ‚Üí css_code non d√©tect√©")
            
            # V√©rifier que les .html ‚Üí html_code
            html_code = generated_data.get("html_code", "")
            if html_code and ("html" in html_code.lower() or "<!DOCTYPE" in html_code or "<html" in html_code):
                self.log_result("File Mapping - HTML", True, 
                              "‚úÖ Extensions .html correctement mapp√©es vers html_code")
            else:
                self.log_result("File Mapping - HTML", False, 
                              "‚ùå Mapping .html ‚Üí html_code non d√©tect√©")
            
            # V√©rifier que les .py ‚Üí backend_code
            backend_code = generated_data.get("backend_code", "")
            if backend_code and ("python" in backend_code.lower() or "def " in backend_code or "import " in backend_code or "from " in backend_code):
                self.log_result("File Mapping - Python Backend", True, 
                              "‚úÖ Extensions .py correctement mapp√©es vers backend_code")
            else:
                self.log_result("File Mapping - Python Backend", False, 
                              "‚ùå Mapping .py ‚Üí backend_code non d√©tect√©")
            
            # Confirmer fallback vers premier fichier si pas de match
            all_files = generated_data.get("all_files", {})
            if all_files and len(all_files) > 0:
                self.log_result("File Mapping - Fallback Mechanism", True, 
                              f"‚úÖ Fallback disponible avec {len(all_files)} fichiers g√©n√©r√©s")
            else:
                self.log_result("File Mapping - Fallback Mechanism", False, 
                              "‚ùå Pas de m√©canisme de fallback d√©tect√©")
                
        except Exception as e:
            self.log_result("File Mapping Test", False, f"Exception: {str(e)}")

    def test_default_structure(self):
        """3. Test structure par d√©faut"""
        print("\n=== 3. TEST STRUCTURE PAR D√âFAUT ===")
        
        if not self.access_token:
            self.log_result("Default Structure Test", False, "No access token available")
            return
        
        try:
            # Tester React: App.jsx, index.html, styles.css, etc.
            react_project_data = {
                "title": "Test Structure React",
                "description": "Application React simple pour tester la structure par d√©faut",
                "type": "web_app"
            }
            
            react_project_response = self.make_request("POST", "/projects", react_project_data)
            if react_project_response.status_code != 200:
                self.log_result("Default Structure - React Project", False, 
                              f"Failed to create React project: {react_project_response.status_code}")
                return
            
            react_project_id = react_project_response.json()["id"]
            
            # G√©n√©ration React avec structure par d√©faut
            react_generation_request = {
                "description": "Application React simple avec composants de base",
                "type": "web_app",
                "framework": "react",
                "advanced_mode": False  # Mode basique pour tester structure par d√©faut
            }
            
            react_response = self.make_request("POST", f"/projects/{react_project_id}/generate", react_generation_request)
            
            if react_response.status_code == 200:
                react_data = react_response.json()
                
                # V√©rifier structure React par d√©faut
                has_react_structure = (
                    react_data.get("react_code") and 
                    react_data.get("html_code") and 
                    react_data.get("css_code")
                )
                
                if has_react_structure:
                    self.log_result("Default Structure - React", True, 
                                  "‚úÖ Structure React par d√©faut g√©n√©r√©e: App.jsx, index.html, styles.css")
                else:
                    self.log_result("Default Structure - React", False, 
                                  "‚ùå Structure React par d√©faut incompl√®te")
            else:
                self.log_result("Default Structure - React", False, 
                              f"React generation failed: {react_response.status_code}")
            
            # Tester FastAPI: main.py, models.py, requirements.txt
            fastapi_project_data = {
                "title": "Test Structure FastAPI",
                "description": "API FastAPI simple pour tester la structure par d√©faut",
                "type": "web_app"
            }
            
            fastapi_project_response = self.make_request("POST", "/projects", fastapi_project_data)
            if fastapi_project_response.status_code != 200:
                self.log_result("Default Structure - FastAPI Project", False, 
                              f"Failed to create FastAPI project: {fastapi_project_response.status_code}")
                return
            
            fastapi_project_id = fastapi_project_response.json()["id"]
            
            # G√©n√©ration FastAPI avec structure par d√©faut
            fastapi_generation_request = {
                "description": "API REST FastAPI avec endpoints de base et mod√®les de donn√©es",
                "type": "web_app",
                "framework": "fastapi",
                "advanced_mode": False  # Mode basique pour tester structure par d√©faut
            }
            
            fastapi_response = self.make_request("POST", f"/projects/{fastapi_project_id}/generate", fastapi_generation_request)
            
            if fastapi_response.status_code == 200:
                fastapi_data = fastapi_response.json()
                
                # V√©rifier structure FastAPI par d√©faut
                backend_code = fastapi_data.get("backend_code", "")
                has_fastapi_structure = (
                    backend_code and 
                    ("fastapi" in backend_code.lower() or "FastAPI" in backend_code)
                )
                
                if has_fastapi_structure:
                    self.log_result("Default Structure - FastAPI", True, 
                                  "‚úÖ Structure FastAPI par d√©faut g√©n√©r√©e: main.py, models.py")
                else:
                    self.log_result("Default Structure - FastAPI", False, 
                                  "‚ùå Structure FastAPI par d√©faut incompl√®te")
            else:
                self.log_result("Default Structure - FastAPI", False, 
                              f"FastAPI generation failed: {fastapi_response.status_code}")
                
        except Exception as e:
            self.log_result("Default Structure Test", False, f"Exception: {str(e)}")

    def test_complete_generation_with_timeout(self):
        """4. Test g√©n√©ration compl√®te avec timeout"""
        print("\n=== 4. TEST G√âN√âRATION COMPL√àTE AVEC TIMEOUT ===")
        
        if not self.access_token:
            self.log_result("Complete Generation Timeout", False, "No access token available")
            return
        
        try:
            # Cr√©er projet pour test de timeout
            timeout_project_data = {
                "title": "Test G√©n√©ration Compl√®te Timeout",
                "description": "Application complexe pour tester les timeouts de g√©n√©ration",
                "type": "ecommerce"
            }
            
            timeout_project_response = self.make_request("POST", "/projects", timeout_project_data)
            if timeout_project_response.status_code != 200:
                self.log_result("Complete Generation - Project Creation", False, 
                              f"Failed to create project: {timeout_project_response.status_code}")
                return
            
            timeout_project_id = timeout_project_response.json()["id"]
            
            # G√©n√©rer avec timeout appropri√©
            start_time = time.time()
            complex_generation_request = {
                "description": "Cr√©er une application e-commerce ultra-compl√®te avec toutes les fonctionnalit√©s avanc√©es: catalogue produits avec recherche intelligente, panier d'achats persistant multi-sessions, syst√®me de paiement multi-devises (Stripe, PayPal, Apple Pay), gestion compl√®te des commandes avec tracking, interface d'administration avanc√©e avec analytics, authentification multi-facteurs, syst√®me de reviews et ratings avec mod√©ration, gestion des stocks en temps r√©el avec alertes automatiques, dashboard analytics avec graphiques interactifs, notifications push multi-canaux, design responsive ultra-moderne avec animations, optimisation SEO compl√®te, int√©gration CRM, syst√®me de coupons et promotions, gestion des retours et remboursements, support client int√©gr√© avec chat en temps r√©el, et API compl√®te pour int√©grations tierces",
                "type": "ecommerce",
                "framework": "react",
                "database": "mongodb",
                "advanced_mode": True,
                "features": [
                    "authentication", 
                    "payment_processing", 
                    "shopping_cart", 
                    "admin_panel",
                    "real_time_notifications",
                    "analytics_dashboard",
                    "inventory_management",
                    "seo_optimization",
                    "multi_currency",
                    "customer_support",
                    "api_integration"
                ],
                "integrations": ["stripe", "paypal", "mongodb", "redis", "elasticsearch", "websocket"],
                "deployment_target": "vercel"
            }
            
            response = self.make_request("POST", f"/projects/{timeout_project_id}/generate", 
                                       complex_generation_request, timeout=60)
            generation_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                
                # V√©rifier TOUS les champs de GeneratedApp sont remplis
                required_fields = ["html_code", "css_code", "js_code", "react_code", "backend_code"]
                filled_fields = []
                empty_fields = []
                
                for field in required_fields:
                    if data.get(field):
                        filled_fields.append(field)
                    else:
                        empty_fields.append(field)
                
                if len(filled_fields) == len(required_fields):
                    self.log_result("Complete Generation - All Fields Filled", True, 
                                  f"‚úÖ TOUS les champs GeneratedApp remplis: {', '.join(filled_fields)}")
                else:
                    self.log_result("Complete Generation - All Fields Filled", False, 
                                  f"‚ùå Champs manquants: {', '.join(empty_fields)}, Remplis: {', '.join(filled_fields)}")
                
                # Confirmer performance < 20s par g√©n√©ration
                if generation_time < 20:
                    self.log_result("Complete Generation - Performance", True, 
                                  f"‚úÖ G√©n√©ration rapide: {generation_time:.1f}s < 20s")
                else:
                    self.log_result("Complete Generation - Performance", False, 
                                  f"‚ùå G√©n√©ration lente: {generation_time:.1f}s > 20s")
                
                # V√©rifier champs avanc√©s
                advanced_fields = ["project_structure", "package_json", "dockerfile", "readme"]
                advanced_filled = [field for field in advanced_fields if data.get(field)]
                
                if advanced_filled:
                    self.log_result("Complete Generation - Advanced Fields", True, 
                                  f"‚úÖ Champs avanc√©s g√©n√©r√©s: {', '.join(advanced_filled)}")
                else:
                    self.log_result("Complete Generation - Advanced Fields", False, 
                                  "‚ùå Aucun champ avanc√© g√©n√©r√©")
                    
            else:
                self.log_result("Complete Generation Timeout", False, 
                              f"Generation failed: {response.status_code} - {response.text}")
                
        except Exception as e:
            self.log_result("Complete Generation Timeout", False, f"Exception: {str(e)}")

    def test_100_percent_functionality_validation(self):
        """5. Validation 100% fonctionnalit√©"""
        print("\n=== 5. VALIDATION 100% FONCTIONNALIT√â ===")
        
        if not self.access_token:
            self.log_result("100% Functionality Validation", False, "No access token available")
            return
        
        try:
            # Mode avanc√©: TOUS les fichiers g√©n√©r√©s correctement
            advanced_success_count = 0
            advanced_total_tests = 3
            
            for i in range(advanced_total_tests):
                test_project_data = {
                    "title": f"Validation Avanc√©e {i+1}",
                    "description": f"Test de validation avanc√©e num√©ro {i+1} pour v√©rifier la g√©n√©ration compl√®te",
                    "type": "ecommerce"
                }
                
                test_project_response = self.make_request("POST", "/projects", test_project_data)
                if test_project_response.status_code != 200:
                    continue
                
                test_project_id = test_project_response.json()["id"]
                
                validation_request = {
                    "description": f"Application e-commerce compl√®te test {i+1} avec toutes les fonctionnalit√©s",
                    "type": "ecommerce",
                    "framework": "react",
                    "database": "mongodb",
                    "advanced_mode": True,
                    "features": ["authentication", "payment_processing", "shopping_cart", "admin_panel"],
                    "integrations": ["stripe", "mongodb"]
                }
                
                validation_response = self.make_request("POST", f"/projects/{test_project_id}/generate", 
                                                      validation_request, timeout=45)
                
                if validation_response.status_code == 200:
                    validation_data = validation_response.json()
                    required_fields = ["html_code", "css_code", "js_code", "react_code", "backend_code"]
                    
                    if all(validation_data.get(field) for field in required_fields):
                        advanced_success_count += 1
            
            advanced_success_rate = (advanced_success_count / advanced_total_tests) * 100
            
            if advanced_success_rate >= 80:
                self.log_result("100% Functionality - Advanced Mode", True, 
                              f"‚úÖ Mode avanc√©: {advanced_success_rate:.1f}% de r√©ussite ({advanced_success_count}/{advanced_total_tests})")
            else:
                self.log_result("100% Functionality - Advanced Mode", False, 
                              f"‚ùå Mode avanc√©: {advanced_success_rate:.1f}% de r√©ussite ({advanced_success_count}/{advanced_total_tests})")
            
            # Mode basique: Toujours fonctionnel en fallback
            basic_success_count = 0
            basic_total_tests = 3
            
            for i in range(basic_total_tests):
                basic_project_data = {
                    "title": f"Validation Basique {i+1}",
                    "description": f"Test de validation basique num√©ro {i+1} pour v√©rifier le fallback",
                    "type": "web_app"
                }
                
                basic_project_response = self.make_request("POST", "/projects", basic_project_data)
                if basic_project_response.status_code != 200:
                    continue
                
                basic_project_id = basic_project_response.json()["id"]
                
                basic_request = {
                    "description": f"Application web simple test {i+1}",
                    "type": "web_app",
                    "framework": "react",
                    "advanced_mode": False  # Mode basique
                }
                
                basic_response = self.make_request("POST", f"/projects/{basic_project_id}/generate", 
                                                 basic_request, timeout=30)
                
                if basic_response.status_code == 200:
                    basic_data = basic_response.json()
                    # Au moins un champ doit √™tre rempli en mode basique
                    if any(basic_data.get(field) for field in ["html_code", "css_code", "js_code", "react_code", "backend_code"]):
                        basic_success_count += 1
            
            basic_success_rate = (basic_success_count / basic_total_tests) * 100
            
            if basic_success_rate >= 90:
                self.log_result("100% Functionality - Basic Mode Fallback", True, 
                              f"‚úÖ Mode basique fallback: {basic_success_rate:.1f}% de r√©ussite ({basic_success_count}/{basic_total_tests})")
            else:
                self.log_result("100% Functionality - Basic Mode Fallback", False, 
                              f"‚ùå Mode basique fallback: {basic_success_rate:.1f}% de r√©ussite ({basic_success_count}/{basic_total_tests})")
            
            # Mapping intelligent: Extensions fichiers correctes
            # (D√©j√† test√© dans test_file_mapping_specific)
            
            # Performance: G√©n√©ration dans les temps
            # (D√©j√† test√© dans les autres fonctions)
            
            # Calcul du score global
            global_score = (advanced_success_rate + basic_success_rate) / 2
            
            if global_score >= 90:
                self.log_result("100% Functionality - GLOBAL VALIDATION", True, 
                              f"üéâ OBJECTIF ATTEINT: {global_score:.1f}% DE FONCTIONNALIT√â!")
            else:
                self.log_result("100% Functionality - GLOBAL VALIDATION", False, 
                              f"‚ùå Objectif non atteint: {global_score:.1f}% de fonctionnalit√©")
                
        except Exception as e:
            self.log_result("100% Functionality Validation", False, f"Exception: {str(e)}")

    def run_vectort_final_tests(self):
        """Run all VECTORT.IO final functionality tests"""
        print("üéØ TEST FINAL 100% FONCTIONNALIT√â - VECTORT.IO")
        print("Test exhaustif avec corrections du mapping de fichiers")
        print(f"Testing against: {self.base_url}")
        print("=" * 80)
        
        # Setup
        self.setup_authentication()
        
        if not self.access_token:
            print("‚ùå √âCHEC: Impossible de s'authentifier, arr√™t des tests")
            return False
        
        # Tests sp√©cifiques selon la demande
        print("\nüöÄ TESTS SP√âCIFIQUES VECTORT.IO")
        print("-" * 50)
        
        # 1. Test g√©n√©ration E-commerce mode avanc√©
        generated_data = self.test_ecommerce_advanced_generation()
        
        # 2. Test mapping de fichiers sp√©cifique
        self.test_file_mapping_specific(generated_data)
        
        # 3. Test structure par d√©faut
        self.test_default_structure()
        
        # 4. Test g√©n√©ration compl√®te avec timeout
        self.test_complete_generation_with_timeout()
        
        # 5. Validation 100% fonctionnalit√©
        self.test_100_percent_functionality_validation()
        
        # Print summary
        print("\n" + "=" * 80)
        print("üéØ R√âSULTATS FINAUX VECTORT.IO")
        print("=" * 80)
        print(f"‚úÖ Tests r√©ussis: {self.results['passed']}")
        print(f"‚ùå Tests √©chou√©s: {self.results['failed']}")
        
        if self.results['passed'] + self.results['failed'] > 0:
            success_rate = (self.results['passed'] / (self.results['passed'] + self.results['failed']) * 100)
            print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        else:
            success_rate = 0
            print(f"üìà Taux de r√©ussite: 0%")
        
        if self.results['errors']:
            print("\nüîç TESTS √âCHOU√âS:")
            for error in self.results['errors']:
                print(f"   ‚Ä¢ {error}")
        
        if success_rate >= 90:
            print("\nüéâ OBJECTIF ATTEINT: 100% DE FONCTIONNALIT√â VECTORT.IO!")
            print("‚úÖ Syst√®me pr√™t pour production avec mapping intelligent des fichiers")
        elif success_rate >= 75:
            print("\n‚ö†Ô∏è FONCTIONNALIT√â PARTIELLE: Syst√®me majoritairement fonctionnel")
            print("üîß Quelques corrections mineures n√©cessaires")
        else:
            print("\n‚ùå OBJECTIF NON ATTEINT: Corrections majeures n√©cessaires")
            print("üö® Syst√®me n√©cessite des am√©liorations importantes")
        
        return success_rate >= 90

if __name__ == "__main__":
    tester = VectortFinalTester()
    success = tester.run_vectort_final_tests()
    sys.exit(0 if success else 1)