#!/usr/bin/env python3
"""
Diagnostic en temps r√©el du g√©n√©rateur avanc√©
"""

import asyncio
import sys
import os
sys.path.append('/app/backend')

from ai_generators.advanced_generator import (
    AdvancedCodeGenerator, 
    GenerationRequest, 
    ProjectType, 
    Framework, 
    DatabaseType
)

async def debug_generator():
    print("üîç DIAGNOSTIC G√âN√âRATEUR AVANC√â")
    print("=" * 50)
    
    # Initialiser le g√©n√©rateur
    api_key = os.environ.get('EMERGENT_LLM_KEY')
    if not api_key:
        print("‚ùå EMERGENT_LLM_KEY manquante!")
        return
    
    generator = AdvancedCodeGenerator(api_key)
    
    # Test 1: G√©n√©ration d'architecture
    print("\nüèóÔ∏è Test 1: G√©n√©ration d'architecture")
    request = GenerationRequest(
        description="Site e-commerce simple avec React",
        project_type=ProjectType.ECOMMERCE,
        framework=Framework.REACT,
        database=DatabaseType.MONGODB
    )
    
    try:
        architecture = await generator._generate_architecture(request)
        print(f"‚úÖ Architecture g√©n√©r√©e: {len(architecture)} fichiers")
        print(f"üìÅ Premiers fichiers: {list(architecture.keys())[:5]}")
    except Exception as e:
        print(f"‚ùå Erreur architecture: {str(e)}")
        return
    
    # Test 2: G√©n√©ration des fichiers principaux
    print("\nüìÑ Test 2: G√©n√©ration des fichiers principaux")
    try:
        main_files = await generator._generate_main_files(request, architecture)
        print(f"‚úÖ Fichiers principaux g√©n√©r√©s: {len(main_files)}")
        
        for file_path, content in main_files.items():
            print(f"üìã {file_path}: {len(content)} caract√®res")
            if len(content) > 100:
                print(f"   Aper√ßu: {content[:100]}...")
            else:
                print(f"   Contenu: {content}")
    except Exception as e:
        print(f"‚ùå Erreur fichiers principaux: {str(e)}")
        import traceback
        traceback.print_exc()
        return
    
    # Test 3: G√©n√©ration d'un seul fichier
    print("\nüìù Test 3: G√©n√©ration d'un fichier sp√©cifique")
    try:
        single_file = await generator._generate_single_file(
            request, 
            "App.jsx", 
            "Composant React principal"
        )
        print(f"‚úÖ Fichier unique g√©n√©r√©: {len(single_file)} caract√®res")
        print(f"   Aper√ßu: {single_file[:200]}...")
    except Exception as e:
        print(f"‚ùå Erreur fichier unique: {str(e)}")
        import traceback
        traceback.print_exc()
    
    # Test 4: G√©n√©ration compl√®te
    print("\nüöÄ Test 4: G√©n√©ration compl√®te")
    try:
        complete_app = await generator.generate_complete_application(request)
        print(f"‚úÖ Application compl√®te g√©n√©r√©e!")
        print(f"üìä Structure: {len(complete_app.project_structure)} fichiers")
        print(f"üìã Main files: {len(complete_app.main_files)} fichiers")
        print(f"üì¶ Package.json: {'‚úÖ' if complete_app.package_json else '‚ùå'}")
        print(f"üê≥ Dockerfile: {'‚úÖ' if complete_app.dockerfile else '‚ùå'}")
        
        # V√©rifier le contenu des fichiers principaux
        for key, value in complete_app.main_files.items():
            print(f"   {key}: {len(str(value))} chars - {'‚úÖ' if len(str(value)) > 50 else '‚ùå'}")
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration compl√®te: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_generator())