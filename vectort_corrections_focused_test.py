#!/usr/bin/env python3
"""
üéØ TEST FOCUSED DES CORRECTIONS VECTORT.IO - AVEC GESTION CR√âDITS
Test sp√©cifique des corrections avec utilisateurs multiples pour √©viter manque de cr√©dits
"""

import requests
import json
import sys
import time
from typing import Dict, Any, Optional

# Configuration
BASE_URL = "https://vectort-builder.preview.emergentagent.com/api"

class VectortFocusedTest:
    def __init__(self):
        self.base_url = BASE_URL
        self.results = {
            "passed": 0,
            "failed": 0,
            "errors": []
        }

    def log_result(self, test_name: str, success: bool, message: str = ""):
        """Log test result"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if message:
            print(f"   {message}")
        
        if success:
            self.results["passed"] += 1
        else:
            self.results["failed"] += 1
            self.results["errors"].append(f"{test_name}: {message}")

    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, 
                    headers: Optional[Dict] = None, access_token: str = None) -> requests.Response:
        """Make HTTP request with error handling"""
        url = f"{self.base_url}{endpoint}"
        default_headers = {"Content-Type": "application/json"}
        
        if headers:
            default_headers.update(headers)
        
        if access_token and "Authorization" not in default_headers:
            default_headers["Authorization"] = f"Bearer {access_token}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=default_headers, timeout=60)
            elif method.upper() == "POST":
                response = requests.post(url, json=data, headers=default_headers, timeout=60)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            return response
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")
            raise

    def create_test_user(self, suffix: str = "") -> tuple:
        """Create a test user and return (access_token, user_id)"""
        test_user = {
            "email": f"vectort_test_{int(time.time())}_{suffix}@test.com",
            "password": "TestPassword123!",
            "full_name": f"Vectort Test User {suffix}"
        }
        
        try:
            response = self.make_request("POST", "/auth/register", test_user)
            
            if response.status_code == 200:
                data = response.json()
                return data["access_token"], data["user"]["id"]
            else:
                return None, None
                
        except Exception as e:
            return None, None

    def test_correction_1_adaptive_credits_detailed(self):
        """
        TEST CORRECTION #1: Syst√®me adaptatif 7/14 cr√©dits - Test d√©taill√©
        """
        print("\n=== CORRECTION #1: Syst√®me Adaptatif 7/14 Cr√©dits (D√©taill√©) ===")
        
        # Test 1: Description Simple (7 cr√©dits)
        access_token, user_id = self.create_test_user("simple")
        if not access_token:
            self.log_result("Correction #1 - Setup Simple", False, "Failed to create user")
            return
        
        try:
            # V√©rifier cr√©dits initiaux
            balance_response = self.make_request("GET", "/credits/balance", access_token=access_token)
            if balance_response.status_code == 200:
                initial_credits = balance_response.json()["total_available"]
                print(f"   Cr√©dits initiaux utilisateur simple: {initial_credits}")
            else:
                initial_credits = 10.0
            
            # Cr√©er et g√©n√©rer projet simple
            project_data = {
                "title": "Site Web Simple",
                "description": "Site web simple avec un formulaire de contact",
                "type": "web_app"
            }
            
            project_response = self.make_request("POST", "/projects", project_data, access_token=access_token)
            if project_response.status_code != 200:
                self.log_result("Correction #1 - Simple Project Creation", False, "Failed to create project")
                return
            
            project_id = project_response.json()["id"]
            
            # G√©n√©ration simple
            generation_request = {
                "description": "Site web simple avec un formulaire de contact",
                "type": "web_app",
                "framework": "react",
                "advanced_mode": False
            }
            
            gen_response = self.make_request("POST", f"/projects/{project_id}/generate", generation_request, access_token=access_token)
            
            if gen_response.status_code == 200:
                # V√©rifier d√©duction
                new_balance_response = self.make_request("GET", "/credits/balance", access_token=access_token)
                if new_balance_response.status_code == 200:
                    new_credits = new_balance_response.json()["total_available"]
                    credits_deducted = initial_credits - new_credits
                    
                    if credits_deducted == 7:
                        self.log_result("Correction #1 - Simple (7 cr√©dits)", True, 
                                      f"‚úÖ Syst√®me adaptatif confirm√©: {credits_deducted} cr√©dits d√©duits")
                    else:
                        self.log_result("Correction #1 - Simple (7 cr√©dits)", False, 
                                      f"‚ùå D√©duction incorrecte: {credits_deducted} cr√©dits (attendu: 7)")
                else:
                    self.log_result("Correction #1 - Simple", False, "Cannot check balance")
            else:
                self.log_result("Correction #1 - Simple", False, f"Generation failed: {gen_response.status_code}")
                
        except Exception as e:
            self.log_result("Correction #1 - Simple", False, f"Exception: {str(e)}")

        # Test 2: Description Complexe (14 cr√©dits) - Nouveau utilisateur
        access_token2, user_id2 = self.create_test_user("complex")
        if not access_token2:
            self.log_result("Correction #1 - Setup Complex", False, "Failed to create user")
            return
        
        try:
            # V√©rifier cr√©dits initiaux
            balance_response = self.make_request("GET", "/credits/balance", access_token=access_token2)
            if balance_response.status_code == 200:
                initial_credits = balance_response.json()["total_available"]
                print(f"   Cr√©dits initiaux utilisateur complexe: {initial_credits}")
            else:
                initial_credits = 10.0
            
            # Cr√©er projet complexe
            complex_project_data = {
                "title": "E-commerce Complexe",
                "description": "Application e-commerce compl√®te avec panier d'achat, paiement Stripe, dashboard admin, gestion utilisateurs, API REST FastAPI, authentification JWT, syst√®me de notifications temps r√©el avec WebSocket, analytics et rapports",
                "type": "web_app"
            }
            
            project_response = self.make_request("POST", "/projects", complex_project_data, access_token=access_token2)
            if project_response.status_code != 200:
                self.log_result("Correction #1 - Complex Project Creation", False, "Failed to create project")
                return
            
            project_id = project_response.json()["id"]
            
            # G√©n√©ration complexe
            complex_generation_request = {
                "description": "Application e-commerce compl√®te avec panier d'achat, paiement Stripe, dashboard admin, gestion utilisateurs, API REST FastAPI, authentification JWT, syst√®me de notifications temps r√©el avec WebSocket, analytics et rapports",
                "type": "web_app",
                "framework": "react",
                "advanced_mode": True
            }
            
            gen_response = self.make_request("POST", f"/projects/{project_id}/generate", complex_generation_request, access_token=access_token2)
            
            if gen_response.status_code == 200:
                # V√©rifier d√©duction
                new_balance_response = self.make_request("GET", "/credits/balance", access_token=access_token2)
                if new_balance_response.status_code == 200:
                    new_credits = new_balance_response.json()["total_available"]
                    credits_deducted = initial_credits - new_credits
                    
                    if credits_deducted == 14:
                        self.log_result("Correction #1 - Complex (14 cr√©dits)", True, 
                                      f"‚úÖ Syst√®me adaptatif confirm√©: {credits_deducted} cr√©dits d√©duits")
                    else:
                        self.log_result("Correction #1 - Complex (14 cr√©dits)", False, 
                                      f"‚ùå D√©duction incorrecte: {credits_deducted} cr√©dits (attendu: 14)")
                else:
                    self.log_result("Correction #1 - Complex", False, "Cannot check balance")
            elif gen_response.status_code == 402:
                # Cr√©dits insuffisants - comportement attendu si <14 cr√©dits
                self.log_result("Correction #1 - Complex (Cr√©dits insuffisants)", True, 
                              f"‚úÖ Syst√®me d√©tecte correctement cr√©dits insuffisants (10 < 14)")
            else:
                self.log_result("Correction #1 - Complex", False, f"Generation failed: {gen_response.status_code}")
                
        except Exception as e:
            self.log_result("Correction #1 - Complex", False, f"Exception: {str(e)}")

    def test_correction_2_file_limitations(self):
        """
        TEST CORRECTION #2: Suppression limitations fichiers
        """
        print("\n=== CORRECTION #2: Suppression Limitations Fichiers ===")
        
        # Cr√©er utilisateur pour test limitations
        access_token, user_id = self.create_test_user("limitations")
        if not access_token:
            self.log_result("Correction #2 - Setup", False, "Failed to create user")
            return
        
        try:
            # Cr√©er projet pour test avanc√©
            project_data = {
                "title": "Test Limitations Avanc√©es",
                "description": "Application complexe pour tester suppression limitations",
                "type": "web_app"
            }
            
            project_response = self.make_request("POST", "/projects", project_data, access_token=access_token)
            if project_response.status_code != 200:
                self.log_result("Correction #2 - Project Creation", False, "Failed to create project")
                return
            
            project_id = project_response.json()["id"]
            
            # G√©n√©ration avanc√©e (devrait cr√©er plus de fichiers)
            generation_request = {
                "description": "Application web compl√®te avec architecture complexe, multiples composants React, services backend, utilitaires, configurations, tests unitaires, documentation compl√®te et scripts de d√©ploiement",
                "type": "web_app",
                "framework": "react",
                "database": "mongodb",
                "advanced_mode": True,
                "features": ["authentication", "api", "database", "testing", "deployment", "monitoring"],
                "integrations": ["stripe", "websocket", "redis", "elasticsearch"]
            }
            
            start_time = time.time()
            gen_response = self.make_request("POST", f"/projects/{project_id}/generate", generation_request, access_token=access_token)
            generation_time = time.time() - start_time
            
            if gen_response.status_code == 200:
                data = gen_response.json()
                
                # Analyser les fichiers g√©n√©r√©s
                all_files = data.get("all_files", {})
                file_count = len(all_files) if all_files else 0
                
                # V√©rifier structure avanc√©e
                has_package_json = bool(data.get("package_json") or (all_files.get("package.json") if all_files else None))
                has_dockerfile = bool(data.get("dockerfile") or (all_files.get("Dockerfile") if all_files else None))
                has_readme = bool(data.get("readme") or (all_files.get("README.md") if all_files else None))
                
                # Crit√®res de succ√®s pour limitations supprim√©es
                criteria = {
                    "more_than_10_files": file_count > 10,  # Plus que l'ancien max ~5
                    "acceptable_timeout": generation_time < 35,  # Nouveau timeout 30s + marge
                    "has_config_files": has_package_json or has_dockerfile or has_readme,
                    "generation_success": True
                }
                
                passed = sum(criteria.values())
                
                if passed >= 3:
                    self.log_result("Correction #2 - Limitations Supprim√©es", True, 
                                  f"‚úÖ Limitations supprim√©es: {file_count} fichiers, {generation_time:.1f}s, "
                                  f"configs: {has_package_json}/{has_dockerfile}/{has_readme}")
                else:
                    self.log_result("Correction #2 - Limitations Supprim√©es", False, 
                                  f"‚ùå Limitations persistantes: {file_count} fichiers, {generation_time:.1f}s")
                    
            elif gen_response.status_code == 402:
                self.log_result("Correction #2 - Cr√©dits", False, "Cr√©dits insuffisants pour test avanc√©")
            else:
                self.log_result("Correction #2", False, f"Generation failed: {gen_response.status_code}")
                
        except Exception as e:
            self.log_result("Correction #2", False, f"Exception: {str(e)}")

    def test_correction_3_code_quality(self):
        """
        TEST CORRECTION #3: Prompts LLM am√©lior√©s - Code complet sans TODO
        """
        print("\n=== CORRECTION #3: Prompts LLM Am√©lior√©s ===")
        
        # Cr√©er utilisateur pour test qualit√© code
        access_token, user_id = self.create_test_user("quality")
        if not access_token:
            self.log_result("Correction #3 - Setup", False, "Failed to create user")
            return
        
        try:
            # Cr√©er projet pour test qualit√©
            project_data = {
                "title": "Test Qualit√© Code",
                "description": "Application pour tester la qualit√© du code g√©n√©r√©",
                "type": "web_app"
            }
            
            project_response = self.make_request("POST", "/projects", project_data, access_token=access_token)
            if project_response.status_code != 200:
                self.log_result("Correction #3 - Project Creation", False, "Failed to create project")
                return
            
            project_id = project_response.json()["id"]
            
            # G√©n√©ration avec focus sur qualit√©
            generation_request = {
                "description": "Cr√©er une application React compl√®te avec composants d√©taill√©s, gestion d'√©tat, styles CSS complets, et fonctionnalit√©s enti√®rement impl√©ment√©es",
                "type": "web_app",
                "framework": "react",
                "advanced_mode": False  # Test basic mode first
            }
            
            gen_response = self.make_request("POST", f"/projects/{project_id}/generate", generation_request, access_token=access_token)
            
            if gen_response.status_code == 200:
                # R√©cup√©rer le code g√©n√©r√©
                code_response = self.make_request("GET", f"/projects/{project_id}/code", access_token=access_token)
                
                if code_response.status_code == 200:
                    data = code_response.json()
                    
                    react_code = data.get("react_code", "")
                    css_code = data.get("css_code", "")
                    html_code = data.get("html_code", "")
                    
                    # Analyser qualit√© du code
                    quality_checks = {
                        "no_todos": self._check_no_todos(react_code, css_code, html_code),
                        "sufficient_length": len(react_code or "") >= 1000,  # Au moins 1000 chars
                        "has_components": "const " in (react_code or "") and "return" in (react_code or ""),
                        "has_styling": len(css_code or "") >= 500,
                        "complete_structure": bool(react_code or html_code)
                    }
                    
                    passed_quality = sum(quality_checks.values())
                    total_quality = len(quality_checks)
                    
                    if passed_quality >= 4:
                        self.log_result("Correction #3 - Code Qualit√©", True, 
                                      f"‚úÖ Code complet g√©n√©r√©: {passed_quality}/{total_quality} crit√®res. "
                                      f"React: {len(react_code or '')} chars, CSS: {len(css_code or '')} chars")
                    else:
                        self.log_result("Correction #3 - Code Qualit√©", False, 
                                      f"‚ùå Code incomplet: {passed_quality}/{total_quality} crit√®res")
                        
                    # D√©tails
                    for check, passed in quality_checks.items():
                        status = "‚úÖ" if passed else "‚ùå"
                        print(f"   {status} {check}")
                        
                else:
                    self.log_result("Correction #3 - Code Retrieval", False, f"Cannot get code: {code_response.status_code}")
            elif gen_response.status_code == 402:
                self.log_result("Correction #3 - Cr√©dits", False, "Cr√©dits insuffisants")
            else:
                self.log_result("Correction #3", False, f"Generation failed: {gen_response.status_code}")
                
        except Exception as e:
            self.log_result("Correction #3", False, f"Exception: {str(e)}")

    def _check_no_todos(self, *code_blocks) -> bool:
        """V√©rifier absence de TODO/placeholders"""
        forbidden_patterns = ["TODO", "...", "// Code √† impl√©menter", "/* TODO", "FIXME", "placeholder", "// TODO"]
        
        for code in code_blocks:
            if code:
                code_upper = code.upper()
                for pattern in forbidden_patterns:
                    if pattern.upper() in code_upper:
                        return False
        return True

    def test_backend_logs_complexity(self):
        """V√©rifier que les logs backend montrent la complexit√©"""
        print("\n=== V√âRIFICATION LOGS COMPLEXIT√â ===")
        
        access_token, user_id = self.create_test_user("logs")
        if not access_token:
            self.log_result("Backend Logs", False, "Failed to create user")
            return
        
        try:
            # Cr√©er projet pour logs
            project_data = {
                "title": "Test Logs Complexit√©",
                "description": "Test simple pour v√©rifier logs de complexit√©",
                "type": "web_app"
            }
            
            project_response = self.make_request("POST", "/projects", project_data, access_token=access_token)
            if project_response.status_code != 200:
                self.log_result("Backend Logs - Project", False, "Failed to create project")
                return
            
            project_id = project_response.json()["id"]
            
            # G√©n√©ration pour d√©clencher logs
            generation_request = {
                "description": "Application simple pour tester les logs de complexit√©",
                "type": "web_app",
                "framework": "react"
            }
            
            gen_response = self.make_request("POST", f"/projects/{project_id}/generate", generation_request, access_token=access_token)
            
            if gen_response.status_code == 200:
                self.log_result("Backend Logs - Complexity", True, 
                              "‚úÖ G√©n√©ration r√©ussie - logs backend devraient montrer 'complexity_level: simple'")
            else:
                self.log_result("Backend Logs", False, f"Generation failed: {gen_response.status_code}")
                
        except Exception as e:
            self.log_result("Backend Logs", False, f"Exception: {str(e)}")

    def run_focused_tests(self):
        """Ex√©cuter les tests focalis√©s des corrections"""
        print("üéØ VECTORT.IO - TEST FOCUSED DES CORRECTIONS CRITIQUES")
        print("=" * 70)
        
        # Tests des corrections avec utilisateurs s√©par√©s
        self.test_correction_1_adaptive_credits_detailed()
        self.test_correction_2_file_limitations()
        self.test_correction_3_code_quality()
        self.test_backend_logs_complexity()
        
        # R√©sultats
        print("\n" + "=" * 70)
        print("üéØ R√âSULTATS FINAUX - CORRECTIONS VECTORT.IO")
        print("=" * 70)
        print(f"‚úÖ Tests r√©ussis: {self.results['passed']}")
        print(f"‚ùå Tests √©chou√©s: {self.results['failed']}")
        
        if self.results['failed'] > 0:
            print("\n‚ùå ERREURS D√âTECT√âES:")
            for error in self.results['errors']:
                print(f"   - {error}")
        
        total_tests = self.results['passed'] + self.results['failed']
        if total_tests > 0:
            success_rate = (self.results['passed'] / total_tests) * 100
            print(f"\nüìä TAUX DE SUCC√àS: {success_rate:.1f}%")
            
            if success_rate >= 75:
                print("üéâ CORRECTIONS MAJORITAIREMENT VALID√âES")
            else:
                print("‚ö†Ô∏è  CORRECTIONS N√âCESSITENT R√âVISION")
        
        return self.results

if __name__ == "__main__":
    tester = VectortFocusedTest()
    tester.run_focused_tests()